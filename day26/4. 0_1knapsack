#include<bits/stdc++.h>

/*
int ans(vector<int> &values, vector<int> &weights, int n, int w
   ,vector<vector<int>> &dp){

    if(n==0){
		if(wt[0]<=w) return value[0];
		else return 0;
	}

    if(dp[n][w]!=-1) return dp[n][w];
	int take=0;
	if(w>=weights[n]){
        take=values[n]+ans(values,weights,n-1,w-weights[n],dp);
	}
	int nottake=ans(values,weights,n-1,w,dp);

	return dp[n][w]=max(take,nottake);
}
*/
int maxProfit(vector<int> &values, vector<int> &weights, int n, int w)
{
	// Write your code here
	vector<vector<int>> dp(n,vector<int>(w+1,0));
    for(int i=weights[0];i<=w;i++){
		dp[0][i] = values[0];
	}
	for(int i=1;i<n;i++){
		for(int j=0;j<=w;j++){
			int take=0;
	        if(j>=weights[i])
                 take=values[i]+dp[i-1][j-weights[i]];

	        int nottake=dp[i-1][j];
			dp[i][j]=max(take,nottake);
		}
	}
	return dp[n-1][w];
}
