subset sum : try out all possible paths
T.C : o(2^n)

code :
void func(int ind,vector<int> &num,vector<int> &ds,int sum){

if(ind==num.size()){
   ds.push_back(sum);
   return ;
}
func(ind+1,num,ds,sum);

func(ind+1,num,ds,sum+num[ind]);

}
vector<int> subsetSum(vector<int> &num)
{
    // Write your code here.
    vector<int> ans;
    int n=num.size();
    func(0,num,ans,0);
    sort(ans.begin(),ans.end());
    return ans;
}

//For loop method for doing the same stuff:

void func(int ind,vector<int> &num,vector<int> &ds,int sum){
ds.push_back(sum);
for(int i=ind;i<num.size();i++){
    sum+=num[i];
    func(i+1,num,ds,sum);
    sum-=num[i];
  }
}
