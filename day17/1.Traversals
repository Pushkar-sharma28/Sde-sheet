// PREORDER TRAVERSAL 

vector<int> getPreOrderTraversal(TreeNode *root)
{
    vector<int> ans;
    if(!root) return ans;
    stack<TreeNode *> st;
    st.push(root);
    while(!st.empty()){
       TreeNode *node=st.top();
       st.pop();
       ans.push_back(node->data);
       if(node->right)
       st.push(node->right);
       if(node->left)
       st.push(node->left);
    }
    return ans;
}

// POSTORDER TRAVERSALS

vector<int> getPostOrderTraversal(TreeNode *root)
{
    // Write your code here.
    vector<int> ans;
    if(!root) return ans;
    stack<TreeNode *> st;
    st.push(root);
    while(!st.empty()){
     TreeNode *node=st.top();
     st.pop();
     if(node->left)
     st.push(node->left);
     if(node->right)
     st.push(node->right);
     ans.push_back(node->data);
    }

    reverse(ans.begin(),ans.end());
    return ans;
}
