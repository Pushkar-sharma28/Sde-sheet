bool isLeaf(TreeNode<int>* root){
    return (root->left==NULL && root->right==NULL);
}
void addLeftBoundary(TreeNode<int>*root,vector<int>&ans){
    TreeNode<int>*node=root->left;
    
    while(node){
        if(!isLeaf(node)) ans.push_back(node->data);
        if(node->left) node=node->left;
        else node=node->right;
    }
}
void addLeaves(TreeNode<int>*root,vector<int>& ans){
    if(isLeaf(root)){
        ans.push_back(root->data);
        return;
    }
    if(root->left) addLeaves(root->left,ans);
    if(root->right) addLeaves(root->right,ans);

}
void addRightBoundary(TreeNode<int>*root,vector<int>&ans){
    vector<int> temp;
    TreeNode<int>*node=root->right;

    while(node){
        if(!isLeaf(node)) temp.push_back(node->data);
        if(node->right) node=node->right;
        else node=node->left;
    }

    for (int i=temp.size()-1;i>=0;i--){
    ans.push_back(temp[i]);
    }


}
vector<int> traverseBoundary(TreeNode<int> *root) {
  vector<int> ans;
  if (!root)
    return ans;
  if (!isLeaf(root))
    ans.push_back(root->data);
  addLeftBoundary(root, ans);
  addLeaves(root, ans);
  addRightBoundary(root, ans);
  return ans;
}
